package controller;

import java.io.IOException;
import java.util.List;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import domain.BoardVO;
import service.BoardService;
import service.BoardServiceImpl;


// request 가 서버에서 받는값
// response 가 서버에서 보내는값
// logger s4js로 임포트


@WebServlet("/brd/*")
public class BoardController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       

	private static final Logger log =
			LoggerFactory.getLogger(BoardController.class);
	//로그 기록을 하기위한 객체를 생성
	
	private RequestDispatcher rdp;
	// jsp에서 받은 요청을 처리하고, 처리의 결과를 다른 jsp로 보내는 역활 
	
	private String destPage; 
	//누르고 목적지로 주소로 보내기 위한 기록 변수
	
	private int isOK;
	//DB의 구문 체크 값 저장
	//controller <-> service, service <-> dao
	
	private BoardService bsv;
	//보드서비스를 구현할때
	//아직 미구현 상태 (service -> interface로 생성)
	
	
	
    public BoardController() {
    	bsv = new BoardServiceImpl(); 
    	// BoardservcieImpl 구현객체
    	// bsv를 구현할 실제 구현객체(service => class로 생성)
    }

	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				// 모든 처리가 이루어지는 부분

				request.setCharacterEncoding("utf-8");
				response.setCharacterEncoding("utf-8");
				response.setContentType("text/html; charset=UTF-8");
				// 각 객체의 인코딩 설정
				//언어 설정
				
				String uri = request.getRequestURI(); //jsp에서 오는 요청 주소
				log.info("uri >>>>>1>" + uri); //뒤에 오는 주소 받기위한 설정
				
				String path = uri.substring(uri.lastIndexOf("/")+1); 
				//뒤에 주소만 뽑아서 switch문을 타기위함
				log.info("주소 확인 " + path);
				
				switch(path) {
				case "register" :
					//글쓰기 페이지로 이동해서 페이지가 나오도록 설정
					destPage = "/board/register.jsp"; //목적지 주소 설정
					break;
				case "insert" :
					try {
						//jsp에서 데이터를 입력 후 -> 전송
						//데이터를 db에 등록 한 후 -> index.jsp로 이동
						String title = request.getParameter("title");
						String writer = request.getParameter("writer");
						String content = request.getParameter("content");
						log.info("insert 객체 들어갔냐 ?");
						BoardVO bvo = new BoardVO(title, writer, content);
						log.info("bvo 들어갔냐 ?" + bvo);
						isOK = bsv.register(bvo);
						log.info((isOK > 0)? "ok" : "fail");
						destPage = "/index.jsp";
						//목적지 주소 설정
					} catch (Exception e) {
						log.info("인서트 오류");
						e.printStackTrace();
					}
					break;
					
				case "list" :
					try {
						log.info("리스트 첫번째 1");
						List<BoardVO>list = bsv.getList();
						//bsv객체를 list로 계속 넣겠다
						log.info(list.get(0).toString());
						// 가져온 List에 첫 값을 출력
						request.setAttribute("list", list);
						//ㅣlist를 화면으로 보내기 request 객체에 실어 보내기
						destPage = "/board/list.jsp";
					} catch (Exception e) {
						log.info("데이터베이스 문제.");
						e.printStackTrace();
					}
					break;
					
				case "detail" :
					try {
						//jsp 에서 보낸 bno 받기
						int bno = Integer.parseInt(request.getParameter("bno"));
						log.info("디테일 관문 1");
						BoardVO bvo = bsv.getDetail(bno);
						 //서비스에게 요청
						log.info("디테일 관문 4");
						log.info("bvo >>"+bvo);
						request.setAttribute("bvo", bvo);
						//jsp에 request에 객체에 실어 보내기
						destPage = "/board/detail.jsp";
						
					} catch (Exception e) {
						log.info("디테일 데이터베이스 오류");
						e.printStackTrace();
					}
					break;
					
				case "modify" :
					try {
						int bno = Integer.parseInt(request.getParameter("bno"));
						log.info("수정 1");
						BoardVO bvo = bsv.getDetail(bno);
						//디테일 을 수정하기 위해 디테일 값 전달
						log.info("수정 2");
						request.setAttribute("bvo", bvo);
						destPage = "/board/modify.jsp";
					} catch (Exception e) {
						log.info("수정db 오류");
						e.printStackTrace();
					}
					break;
					
				case "edit" :
					try {
						int bno = Integer.parseInt(request.getParameter("bno"));
						String title = request.getParameter("title");
						String content = request.getParameter("content");
						BoardVO bvo = new BoardVO(bno, title, content);
						//디테일 을 수정하기 위해 디테일 값 전달
						log.info("edit 1");
						log.info("bvo" + bvo);
						isOK = bsv.modify(bvo);
						log.info((isOK > 0)? "ok" : "fail");
						destPage = "detail?bno="+bno;
						//한개의 페이지의 디테일로 들어가려면 bno 딸려들어가야함
					} catch (Exception e) {
						log.info("edit 오류");
						e.printStackTrace();
					}
					break;
					
				}
				
				
				//목적지 데이터 경로로 전달해주는 객체(requestDispatcher)
				rdp = request.getRequestDispatcher(destPage);
				rdp.forward(request, response); //요청에 필요한 객체를 가지고, 경로로 이동.
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		service(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		service(request, response);
	}

}
